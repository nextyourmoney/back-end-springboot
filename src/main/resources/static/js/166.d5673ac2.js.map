{"version":3,"file":"js/166.d5673ac2.js","mappings":"0JAIAA,eAAeC,EAAaC,EAAS,GACjC,IAAIC,EAAW,KACf,IAEI,OADAA,QAAiBC,IAAAA,IAAU,cAAe,CAAEC,OAAQ,CAAEH,OAAQA,KACvD,CAAEI,OAAQ,UAAWC,KAAMJ,EAASI,MAE7C,MAAOC,GAEL,GADAC,QAAQC,IAAIF,IACRA,EAAML,SAWN,MAAO,CAAEG,OAAQ,QATjB,GAA8B,MAA1BE,EAAML,SAASQ,cACLC,EAAAA,EAAAA,eAGN,OADAT,QAAiBC,IAAAA,IAAU,cAAe,CAAEC,OAAQ,CAAEH,OAAQA,KACvD,CAAEI,OAAQ,UAAWC,KAAMJ,EAASI,MAQ3D,OAAgB,MAAZJ,EAEOA,EAASI,KAET,KAMfP,eAAea,EAAYC,GACvB,IAAIC,EAAU,KACd,IACI,MAAMZ,QAAiBC,IAAAA,KAAW,UAAWU,GAC7CC,EAAUZ,EAASI,KACrB,MAAOC,GACL,GAAIA,EAAML,UAEwB,MAA1BK,EAAML,SAASQ,cACLC,EAAAA,EAAAA,eAAwB,CAC9B,MAAMT,QAAiBC,IAAAA,KAAW,UAAWU,GAC7CC,EAAUZ,EAASI,MAMnC,OAAOQ,EAIXf,eAAegB,EAAUC,EAAKC,GAC1B,IAAIC,EAAQ,KACZ,IACI,MAAMhB,QAAiBC,IAAAA,IAAW,UAASa,SAAWC,KACtDC,EAAQhB,EAASI,KACnB,MAAOC,GACL,GAAIA,EAAML,UAEwB,MAA1BK,EAAML,SAASQ,cACLC,EAAAA,EAAAA,eAAwB,CAC9B,MAAMT,QAAiBC,IAAAA,IAAW,UAASa,SAAWC,KACtDC,EAAQhB,EAASI,MAMjC,OAAOY,EAIXnB,eAAeoB,EAAoBH,GAC/B,IAAII,EAAO,KAEX,IACI,MAAMlB,QAAiBC,IAAAA,IAAW,kBAAiBa,IAAO,CAAEK,aAAc,SAC1ED,EAAOlB,EAASI,KAClB,MAAOC,GACL,GAAIA,EAAML,UAEwB,MAA1BK,EAAML,SAASQ,cACLC,EAAAA,EAAAA,eAAwB,CAC9B,MAAMT,QAAiBC,IAAAA,IAAW,kBAAiBa,IAAO,CAAEK,aAAc,SAC1ED,EAAOlB,EAASI,MAMhC,OAAOc,EAIXrB,eAAeuB,EAAYN,GACvB,IAAIX,EAAS,KAEb,IACI,MAAMH,QAAiBC,IAAAA,UAAc,UAASa,KAC9CX,EAASH,EAASI,KAAKD,OACzB,MAAOE,GACL,GAAIA,EAAML,UAEwB,MAA1BK,EAAML,SAASQ,cACLC,EAAAA,EAAAA,eAAwB,CAC9B,MAAMT,QAAiBC,IAAAA,UAAc,UAASa,KAC9CX,EAASH,EAASI,KAAKD,QAMvC,OAAOA,EAGXN,eAAewB,EAAYV,GACvB,IAAIC,EAAU,KAEd,IACI,MAAMZ,QAAiBC,IAAAA,IAAW,UAAUU,GAC5CC,EAAUZ,EAASI,KACrB,MAAOC,GACL,GAAIA,EAAML,UAEwB,MAA1BK,EAAML,SAASQ,cACLC,EAAAA,EAAAA,eAAwB,CAC9B,MAAMT,QAAiBC,IAAAA,IAAW,UAAUU,GAC5CC,EAAUZ,EAASI,MAKnC,OAAOQ,EAIX,QACId,aAAAA,EACAY,YAAAA,EACAG,UAAAA,EACAI,oBAAAA,EACAG,YAAAA,EACAC,YAAAA,I,2vBCnFA,MAAMC,GAAOC,EAAAA,EAAAA,IAAI,MACXC,GAAQC,EAAAA,EAAAA,MACRC,GAASC,EAAAA,EAAAA,MAETC,GAAQC,EAAAA,EAAAA,MACY,KAAvBD,EAAME,MAAMC,QACXL,EAAOM,KAAK,sBAKhB,IAAIjC,EAASyB,EAAMS,MAAMlC,OAQzBF,eAAeC,EAAaC,GAExB,MAAMI,QAAe+B,EAAAA,EAAAA,aAAsBnC,GACtB,YAAlBI,EAAOA,OACNmB,EAAKa,MAAQhC,EAAOC,KAGpBsB,EAAOM,KAAK,sBAKpB,SAASI,EAAMC,EAAOC,GAClB,MAAMC,EAAU,GAChB,IAAI,IAAIC,EAAIH,EAAOG,GAAKF,EAAKE,IACzBD,EAAQP,KAAKQ,GAEjB,OAAOD,EAGX,SAASE,EAAa1C,GAClB2B,EAAOM,KAAM,6BAA4BjC,K,MA1B/B,cAAXA,IACCA,EAAS,GAcbD,EAAaC,IAcb2C,EAAAA,EAAAA,IAAMlB,GAAO,CAACmB,EAAQC,KACJ,sBAAfD,EAAOE,OACHF,EAAOV,MAAMlC,OAChBD,EAAa6C,EAAOV,MAAMlC,QAE1BD,EAAa,O,yrDC9GrB,MAAMgD,EAAc,EAEpB","sources":["webpack://front-end-vue/./src/apis/board.js","webpack://front-end-vue/./src/views/menu07/board/List.vue","webpack://front-end-vue/./src/views/menu07/board/List.vue?5f9a"],"sourcesContent":["import axios from \"axios\";\nimport apiAuth from \"@/apis/auth\";\n\n//게시물 목록 요청 //통신 모듈처럼사용된다\nasync function getBoardList(pageNo = 1) {\n    let response = null;\n    try {\n        response = await axios.get(\"/board/list\", { params: { pageNo: pageNo } });\n        return { result: \"success\", data: response.data }; //데이터에 결과 값을 저장한다.\n        // console.log(response);\n    } catch (error) {\n        console.log(error);\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) { //또한 보안을 위해서 접근 토큰은 짧게, 리플래쉬는 자주 하여 반복한다. 이를 통해 노출, 탈취가 되더라도 예방\n                    //설령 만료가 되었더라도 아직 로그인 상태라면 시간 상관 없이 접근 할 수 있도록 사용자 모르게 언제나 리플레시ㅟ 진행\n                    response = await axios.get(\"/board/list\", { params: { pageNo: pageNo } });\n                    return { result: \"success\", data: response.data }; //데이터에 결과 값을 저장한다.\n                }\n            }\n        } else {\n            //서버 응답이 없다. 즉 네트워크 오류\n            return { result: \"fail\" };\n        }\n    }\n    if (response != null) {\n        //json 리턴의 값이 data이다. 그 뭐냐 vue의 data값이다.\n        return response.data;\n    } else {\n        return null;\n    }\n}\n\n//게시물 쓰기\n// 게시물 쓰기 (멀티 파트)\nasync function createBoard(multipartFormData) {\n    let dbBoard = null;\n    try {\n        const response = await axios.post(\"/board/\", multipartFormData);\n        dbBoard = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.post(\"/board/\", multipartFormData);\n                    dbBoard = response.data;\n                }\n            }\n        }\n    }\n\n    return dbBoard;\n}\n\n//게시물 가져오기\nasync function readBoard(bno, hit) {\n    let board = null;\n    try {\n        const response = await axios.get(`/board/${bno}?hit=${hit}`);\n        board = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.get(`/board/${bno}?hit=${hit}`);\n                    board = response.data;\n                }\n            }\n        }\n    }\n\n    return board;\n}\n\n//파일 다운로드\nasync function downloadBoardAttach(bno) {\n    let blob = null;\n\n    try {\n        const response = await axios.get(`/board/battach/${bno}`, { responseType: \"blob\" }); //blob타입의 데이터 타입이 들어가야 동작한다.는 조건\n        blob = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.get(`/board/battach/${bno}`, { responseType: \"blob\" }); //blob타입의 데이터 타입이 들어가야 동작한다.는 조건\n                    blob = response.data;\n                }\n            }\n        }\n    }\n\n    return blob;\n}\n\n//게시글 삭제\nasync function deleteBoard(bno) {\n    let result = null;\n\n    try {\n        const response = await axios.delete(`/board/${bno}`);\n        result = response.data.result; //spring에서  result라는 값으로 넘어가기 때문에\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.delete(`/board/${bno}`);\n                    result = response.data.result; //spring에서  result라는 값으로 넘어가기 때문에\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nasync function updateBoard(multipartFormData) {\n    let dbBoard = null;\n\n    try {\n        const response = await axios.put(`/board/`, multipartFormData);\n        dbBoard = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.put(`/board/`, multipartFormData);\n                    dbBoard = response.data;\n                }\n            }\n        }\n    }\n    return dbBoard;\n}\n\n//내보내기\nexport default {\n    getBoardList,\n    createBoard,\n    readBoard,\n    downloadBoardAttach,\n    deleteBoard,\n    updateBoard,\n};\n","<template>\n    <div class=\"card\">\n        <div class = \"card-header\">\n            list Board\n        </div>\n        <div class=\"card-body\">\n\n            <!-- page처리 시 null을 binding 할 수 없기 때문이다. //setup 구성 전에 dom이 생성 될 수 있기 때문에 에러가 발생할 수도 있다.  -->\n            <div v-if=\"page != null\"> \n                <div class = \"mb-3\">\n                    <router-link to=\"/menu07/board/writeform\" class=\"btn btn-info btn-sm mr-2\"> 생성 </router-link>\n                </div>\n                \n                <table class=\"table table-sm table-striped table-bordered\">\n                    <thead>\n                        <tr>\n                        <th class=\"text-center\" style=\"width:70px\">번호</th>\n                        <th class=\"text-center\">제목</th>\n                        <th class=\"text-center\" style=\"width:90px\">글쓴이</th>\n                        <th class=\"text-center\" style=\"width:120px\">날짜</th>\n                        <th class=\"text-center\" style=\"width:70px\">조회수</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        \n                        <tr v-for=\"board in page.boards\" :key=\"board.bno\">\n                            <td class=\"text-center\">{{board.bno}}</td>\n                            <td >\n                                <router-link :to = \"`/menu07/board/read?bno=${board.bno}&pageNo=${page.pager.pageNo}&hit=true`\">\n                                    {{board.btitle}}\n                                </router-link>\n                                \n                            </td>\n                            <td >{{board.mid}}</td>\n                            <td >{{new Date(board.bdate).toLocaleDateString()}}</td>\n                            <td >{{board.bhitcount}}</td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"5\" class=\"text-center\">\n                                <button @click=\"changePageNo(1)\"    class = \"btn btn-outline-primary btn-sm mr-1\">처음</button>\n                                <button v-if=\"page.pager.groupNo > 1\" @click=\"changePageNo(page.pager.startPageNo-1)\" class = \"btn btn-outline-info btn-sm mr-1\">이전</button>\n                                <!-- <button v-for = \"pageNo in range(page.pager.startPageNo, page.pager.endPageNo)\" @click=\"changePageNo(pageNo)\" \n                                    :key=\"pageNo\" class = \"btn btn-outline-success btn-sm mr-1\" :class = \"{'btn-outline-success':(page.pager.pageNo!=pageNo), 'btn-danger':(page.pager.pageNo==pageNo)}\">{{pageNo}}</button> -->\n                                <button v-for = \"pageNo in range(page.pager.startPageNo, page.pager.endPageNo)\" @click=\"changePageNo(pageNo)\" \n                                    :key=\"pageNo\" :class = \"(page.pager.pageNo==pageNo)?'btn-danger':'btn-outline-success'\">{{pageNo}}</button>\n                                \n                                <button v-if=\"page.pager.groupNo < page.pager.totalGroupNo\" @click=\"changePageNo(page.pager.endPageNo+1)\" class = \"btn btn-outline-info btn-sm mr-1\">다음</button>\n                                <button @click=\"changePageNo(page.pager.totalPageNo)\" class = \"btn btn-outline-primary btn-sm mr-1\">맨끝</button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup>\n    //import {getBoardList} from \"@/apis/board\";\n    import apiBoard from \"@/apis/board\"; \n    import {ref, watch} from \"vue\";\n    import {useRoute, useRouter } from \"vue-router\";\n    import {useStore} from \"vuex\";\n\n    //반응형 속성 선언\n    const page = ref(null);\n    const route = useRoute();\n    const router = useRouter();\n\n    const store = useStore();\n    if(store.state.userId === ''){\n        router.push(\"/menu07/auth/login\"); //위의 scrit에 선언된 if방식을 통한 로그인 확인 후 리스트 출력보다는 리스트 생성 이전에 라우터에서 확인하는 것이 더 좋다. \n    }\n\n\n    //라우팅시에 전달된 query String에서 pageNo을 읽기\n    let pageNo = route.query.pageNo;\n\n    //페이지가 없을 경우 디폴트로 1을 선언한다. \n    if(pageNo === \"undefined\"){\n        pageNo = 1;\n    }\n\n    //rest api와 통신하여 페이지에 대한 정보(게시물 목록 + 페이지)를 가져온다. 이때 page라는 반응형 속성에 저장한다. \n    async function getBoardList(pageNo){\n        //apis의 function이 비동기 방식이므로 반드시 await으로 호출해야 한다. \n        const result = await apiBoard.getBoardList(pageNo);\n        if(result.result === \"success\"){ //위의 result의 결과값에 따라서 출력을 다르게 한다. \n            page.value = result.data;\n            //console.log(page.value);\n        } else{\n            router.push(\"/menu07/auth/login\");\n        }\n    }\n    getBoardList(pageNo);\n\n    function range(start, end){\n        const numbers = [];\n        for(var i = start; i <= end; i++){\n            numbers.push(i);\n        }\n        return numbers;\n    }\n\n    function changePageNo(pageNo){\n        router.push(`/menu07/board/list?pageNo=${pageNo}`);\n    }\n\n    watch(route, (newUrl, oldUrl) => {\n    if(newUrl.path == \"/menu07/board/list\"){\n        if(newUrl.query.pageNo){\n        getBoardList(newUrl.query.pageNo);\n        }else{\n        getBoardList(1);\n        }\n    }\n    });\n</script>\n\n<style scoped>\n\n</style>","import script from \"./List.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./List.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["async","getBoardList","pageNo","response","axios","params","result","data","error","console","log","status","apiAuth","createBoard","multipartFormData","dbBoard","readBoard","bno","hit","board","downloadBoardAttach","blob","responseType","deleteBoard","updateBoard","page","ref","route","useRoute","router","useRouter","store","useStore","state","userId","push","query","apiBoard","value","range","start","end","numbers","i","changePageNo","watch","newUrl","oldUrl","path","__exports__"],"sourceRoot":""}