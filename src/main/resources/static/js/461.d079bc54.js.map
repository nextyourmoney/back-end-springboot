{"version":3,"file":"js/461.d079bc54.js","mappings":"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","sources":["webpack://front-end-vue/./src/apis/board.js","webpack://front-end-vue/./src/views/menu07/board/UpdateForm.vue","webpack://front-end-vue/./src/views/menu07/board/UpdateForm.vue?f0df"],"sourcesContent":["import axios from \"axios\";\nimport apiAuth from \"@/apis/auth\";\n\n//게시물 목록 요청 //통신 모듈처럼사용된다\nasync function getBoardList(pageNo = 1) {\n    let response = null;\n    try {\n        response = await axios.get(\"/board/list\", { params: { pageNo: pageNo } });\n        return { result: \"success\", data: response.data }; //데이터에 결과 값을 저장한다.\n        // console.log(response);\n    } catch (error) {\n        console.log(error);\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) { //또한 보안을 위해서 접근 토큰은 짧게, 리플래쉬는 자주 하여 반복한다. 이를 통해 노출, 탈취가 되더라도 예방\n                    //설령 만료가 되었더라도 아직 로그인 상태라면 시간 상관 없이 접근 할 수 있도록 사용자 모르게 언제나 리플레시ㅟ 진행\n                    response = await axios.get(\"/board/list\", { params: { pageNo: pageNo } });\n                    return { result: \"success\", data: response.data }; //데이터에 결과 값을 저장한다.\n                }\n            }\n        } else {\n            //서버 응답이 없다. 즉 네트워크 오류\n            return { result: \"fail\" };\n        }\n    }\n    if (response != null) {\n        //json 리턴의 값이 data이다. 그 뭐냐 vue의 data값이다.\n        return response.data;\n    } else {\n        return null;\n    }\n}\n\n//게시물 쓰기\n// 게시물 쓰기 (멀티 파트)\nasync function createBoard(multipartFormData) {\n    let dbBoard = null;\n    try {\n        const response = await axios.post(\"/board/\", multipartFormData);\n        dbBoard = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.post(\"/board/\", multipartFormData);\n                    dbBoard = response.data;\n                }\n            }\n        }\n    }\n\n    return dbBoard;\n}\n\n//게시물 가져오기\nasync function readBoard(bno, hit) {\n    let board = null;\n    try {\n        const response = await axios.get(`/board/${bno}?hit=${hit}`);\n        board = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.get(`/board/${bno}?hit=${hit}`);\n                    board = response.data;\n                }\n            }\n        }\n    }\n\n    return board;\n}\n\n//파일 다운로드\nasync function downloadBoardAttach(bno) {\n    let blob = null;\n\n    try {\n        const response = await axios.get(`/board/battach/${bno}`, { responseType: \"blob\" }); //blob타입의 데이터 타입이 들어가야 동작한다.는 조건\n        blob = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.get(`/board/battach/${bno}`, { responseType: \"blob\" }); //blob타입의 데이터 타입이 들어가야 동작한다.는 조건\n                    blob = response.data;\n                }\n            }\n        }\n    }\n\n    return blob;\n}\n\n//게시글 삭제\nasync function deleteBoard(bno) {\n    let result = null;\n\n    try {\n        const response = await axios.delete(`/board/${bno}`);\n        result = response.data.result; //spring에서  result라는 값으로 넘어가기 때문에\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.delete(`/board/${bno}`);\n                    result = response.data.result; //spring에서  result라는 값으로 넘어가기 때문에\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\nasync function updateBoard(multipartFormData) {\n    let dbBoard = null;\n\n    try {\n        const response = await axios.put(`/board/`, multipartFormData);\n        dbBoard = response.data;\n    } catch (error) {\n        if (error.response) {\n            //서버 응답이 있다.\n            if (error.response.status === 403) {\n                if (await apiAuth.refreshToken()) {\n                    const response = await axios.put(`/board/`, multipartFormData);\n                    dbBoard = response.data;\n                }\n            }\n        }\n    }\n    return dbBoard;\n}\n\n//내보내기\nexport default {\n    getBoardList,\n    createBoard,\n    readBoard,\n    downloadBoardAttach,\n    deleteBoard,\n    updateBoard,\n};\n","<template>\n    <div class=\"card\">\n        <div class = \"card-header\">\n            update Form\n        </div>\n        <div class=\"card-body\">\n\n        </div><div class=\"card-body\">\n            <form v-if = \"board\" v-on:submit.prevent=\"handleUpdate\">\n                <div class=\"form-group row\">\n                    <label class=\"col-sm-2 col-form-label\">제목</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"text\" class=\"form-control\" v-model=\"board.btitle\"/>\n                    </div>\n                </div>\n\n                <div class=\"form-group row\">\n                    <label class=\"col-sm-2 col-form-label\">내용</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"text\" class=\"form-control\" v-model=\"board.bcontent\"/>\n                    </div>\n                </div>\n\n                <div class=\"form-group row\">\n                    <label class=\"col-sm-2 col-form-label\">첨부그림</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"file\" class=\"form-control-file\" ref=\"newbattach\" @change=\"previewImg\"/>\n                    </div>\n                </div>\n\n                <div>\n                    <img :src=\"battach\" width=\"200\"/>\n                </div>\n\n                <div class=\"form-group row\">\n                    <div class=\"col-sm-12 d-flex justify-content-center\">\n                        <input type=\"submit\" class=\"btn btn-primary btn-sm mr-2\" value=\"수정\"/>\n                        <input type=\"button\" class=\"btn btn-primary btn-sm\" value=\"취소\" v-on:click=\"handleCancel\"/>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</template>\n\n<script setup>\n    import { ref } from \"vue\"; \n    import {useRoute, useRouter} from \"vue-router\";\n    import apiBoard from \"@/apis/board\";\n\n    const board = ref(null);\n    const route = useRoute();\n    const router = useRouter();\n    const bno = route.query.bno\n    const pageNo = route.query.pageNo;\n    const newbattach = ref(null);\n    const battach = ref(null);\n\n    async function getBoard(){\n        const dbBoard = await apiBoard.readBoard(bno, false); //조회수는 필요 없어서 false처리\n        board.value = dbBoard;\n\n        const blob = await apiBoard.downloadBoardAttach(bno);\n        if(blob != null){\n            battach.value = URL.createObjectURL(blob);\n        }\n    }\n    getBoard();\n\n    async function handleUpdate(){\n        const multipartFormData = new FormData();\n        multipartFormData.append(\"btitle\", board.value.btitle);\n        multipartFormData.append(\"bcontent\", board.value.bcontent);\n        multipartFormData.append(\"bno\", board.value.bno);\n\n        if(newbattach.value.files.length != 0){\n            multipartFormData.append(\"battach\", newbattach.value.files[0]); \n        }\n        await apiBoard.updateBoard(multipartFormData);\n        router.push(`/menu07/board/read?bno=${bno}&pageNo=${pageNo}&hit=false`);\n\n    }\n\n    function handleCancel(){\n        router.push(`/menu07/board/read?bno=${bno}&pageNo=${pageNo}&hit=false`);\n    }\n\n    function previewImg(){\n        if(newbattach.value.files.length != 0){\n            battach.value = URL.createObjectURL(newbattach.value.files[0]);\n        } else{\n            battach.value = null;\n        }\n    }\n\n</script>\n\n<style scoped>\n\n</style>","import script from \"./UpdateForm.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UpdateForm.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["async","getBoardList","pageNo","response","axios","params","result","data","error","console","log","status","apiAuth","createBoard","multipartFormData","dbBoard","readBoard","bno","hit","board","downloadBoardAttach","blob","responseType","deleteBoard","updateBoard","ref","route","useRoute","router","useRouter","query","newbattach","battach","getBoard","apiBoard","value","URL","createObjectURL","handleUpdate","FormData","append","btitle","bcontent","files","length","push","handleCancel","previewImg","__exports__"],"sourceRoot":""}